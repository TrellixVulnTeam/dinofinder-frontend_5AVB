{"ast":null,"code":"export function fetchDinosaurs(url){return function(dispatch){var dinoTypeSelector=function dinoTypeSelector(url){var dino;switch(url){case'Triassic Herbivore':dino='1';break;case'Triassic Carnivore':dino='2';break;case'Triassic Avian':dino='3';break;case'Triassic Marine':dino='4';break;case'Jurassic Herbivore':dino='5';break;case'Jurassic Carnivore':dino='6';break;case'Jurassic Avian':dino='7';break;case'Jurassic Marine':dino='8';break;case'Cretaceous Herbivore':dino='9';break;case'Cretaceous Carnivore':dino='10';break;case'Cretaceous Avian':dino='11';break;case'Cretaceous Marine':dino='12';break;default:console.log('it did not match anything');break;}return dino;};var eraSelector=function eraSelector(url){if(url.includes('Triassic')){return 1;}else if(url.includes('Jurassic')){return 2;}else if(url.includes('Cretaceous')){return 3;}};return fetch(\"https://murmuring-mesa-24613.herokuapp.com/api/v1/eras/\".concat(eraSelector(url),\"/dino_types/\").concat(dinoTypeSelector(url),\"/dinosaurs\"))///fetching to different urls based on the params from the first page.\n.then(function(resp){return resp.json();}).then(function(dinosaurs){return dispatch({type:'FETCH_DINOSAURS',payload:dinosaurs});});};}export default fetchDinosaurs;","map":{"version":3,"sources":["/mnt/c/Users/chris/code/dinofinder/dinofinder-frontend/src/actions/fetchDinosaurs.js"],"names":["fetchDinosaurs","url","dispatch","dinoTypeSelector","dino","console","log","eraSelector","includes","fetch","then","resp","json","dinosaurs","type","payload"],"mappings":"AACA,MAAO,SAASA,CAAAA,cAAT,CAAwBC,GAAxB,CAA6B,CAEpC,MAAO,UAACC,QAAD,CAAc,CAEnB,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACF,GAAD,CAAS,CAChC,GAAIG,CAAAA,IAAJ,CACF,OAAQH,GAAR,EACE,IAAK,oBAAL,CACAG,IAAI,CAAG,GAAP,CACE,MACF,IAAK,oBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACD,IAAK,gBAAL,CACCA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,iBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,oBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,oBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACA,IAAK,gBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,iBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,sBAAL,CACEA,IAAI,CAAG,GAAP,CACA,MACF,IAAK,sBAAL,CACEA,IAAI,CAAG,IAAP,CACA,MACF,IAAK,kBAAL,CACEA,IAAI,CAAG,IAAP,CACA,MACF,IAAK,mBAAL,CACEA,IAAI,CAAG,IAAP,CACA,MACJ,QACAC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACE,MAvCJ,CAyCE,MAAOF,CAAAA,IAAP,CACD,CA5CD,CA8CA,GAAMG,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACN,GAAD,CAAS,CAE3B,GAAIA,GAAG,CAACO,QAAJ,CAAa,UAAb,CAAJ,CAA6B,CAC3B,MAAO,EAAP,CACD,CAFD,IAEO,IAAIP,GAAG,CAACO,QAAJ,CAAa,UAAb,CAAJ,CAA6B,CAClC,MAAO,EAAP,CACD,CAFM,IAEA,IAAIP,GAAG,CAACO,QAAJ,CAAa,YAAb,CAAJ,CAA+B,CACpC,MAAO,EAAP,CACD,CACF,CATD,CAWA,MAAOC,CAAAA,KAAK,kEAA2DF,WAAW,CAACN,GAAD,CAAtE,wBAA0FE,gBAAgB,CAACF,GAAD,CAA1G,eAA8H;AAAnI,CACNS,IADM,CACD,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EADH,EAENF,IAFM,CAED,SAAAG,SAAS,QAAIX,CAAAA,QAAQ,CAAC,CACxBY,IAAI,CAAE,iBADkB,CAExBC,OAAO,CAAEF,SAFe,CAAD,CAAZ,EAFR,CAAP,CAMG,CAjEL,CAkEG,CAGH,cAAeb,CAAAA,cAAf","sourcesContent":["\r\nexport function fetchDinosaurs(url) {\r\n\r\nreturn (dispatch) => {\r\n\r\n  const dinoTypeSelector = (url) => {\r\n    let dino;\r\n  switch (url) {\r\n    case 'Triassic Herbivore':\r\n    dino = '1'\r\n      break;\r\n    case 'Triassic Carnivore':\r\n      dino = '2'\r\n      break;\r\n     case 'Triassic Avian':\r\n      dino = '3'\r\n      break;\r\n    case 'Triassic Marine':\r\n      dino = '4'\r\n      break;\r\n    case 'Jurassic Herbivore':\r\n      dino = '5'\r\n      break;\r\n    case 'Jurassic Carnivore':\r\n      dino = '6'\r\n      break;\r\n      case 'Jurassic Avian':\r\n        dino = '7'\r\n        break;\r\n      case 'Jurassic Marine':\r\n        dino = '8'\r\n        break;\r\n      case 'Cretaceous Herbivore':\r\n        dino = '9'\r\n        break;\r\n      case 'Cretaceous Carnivore':\r\n        dino = '10'\r\n        break;\r\n      case 'Cretaceous Avian':\r\n        dino = '11'\r\n        break;\r\n      case 'Cretaceous Marine':\r\n        dino = '12'\r\n        break;\r\n    default:\r\n    console.log('it did not match anything')\r\n      break;\r\n    }\r\n    return dino\r\n  }\r\n\r\n  const eraSelector = (url) => {\r\n\r\n    if (url.includes('Triassic')){\r\n      return 1\r\n    } else if (url.includes('Jurassic')){\r\n      return 2\r\n    } else if (url.includes('Cretaceous')){\r\n      return 3\r\n    }\r\n  }\r\n\r\n  return fetch(`https://murmuring-mesa-24613.herokuapp.com/api/v1/eras/${eraSelector(url)}/dino_types/${dinoTypeSelector(url)}/dinosaurs`)  ///fetching to different urls based on the params from the first page.\r\n  .then(resp => resp.json())\r\n  .then(dinosaurs => dispatch({\r\n      type: 'FETCH_DINOSAURS',\r\n      payload: dinosaurs\r\n      }))\r\n    }\r\n  }\r\n\r\n\r\nexport default fetchDinosaurs\r\n"]},"metadata":{},"sourceType":"module"}