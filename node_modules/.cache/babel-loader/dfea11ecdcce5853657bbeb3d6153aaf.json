{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/chris/code/dinofinder/dinofinder-frontend/src/containers/DinosaursContainer.js\";\nimport React from 'react';\nimport DinosaurCard from '../components/DinosaurCard';\nimport DinosaurInput from '../components/DinosaurInput';\nimport DinosaursList from '../components/DinosaursList';\nimport { connect } from 'react-redux';\nimport { fetchDinosaurs } from '../actions/fetchDinosaurs';\nimport { addDinosaur } from '../actions/addDinosaur';\nimport { editDinosaur } from '../actions/editDinosaur';\nimport { deleteDinosaur } from '../actions/deleteDinosaur';\nimport { dinoTypeSelector } from '../helpers/DinoSelector.js';\nimport { Container, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport DeleteConfirmation from \"../components/DeleteConfirm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DinosaursContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showDeleteModal = dinosaur => {\n      // setType(type);\n      // setId(id);\n      // setFruitMessage(null);\n      // setVegetableMessage(null);\n      // this.setState({ showHide: !this.state.showHide });\n      this.setState({\n        setDeleteMessage: 'Are you sure?'\n      });\n      this.setStatesetDisplayConfirmationModal(true);\n    };\n\n    this.hideConfirmationModal = () => {\n      this.setDisplayConfirmationModal(false);\n    };\n\n    this.handleDelete = dinosaur => {\n      this.props.deleteDinosaur(dinosaur.id, dinosaur.dino_type.id, dinosaur.dino_type.era_id); //my original code \n\n      alert(`Dinosaur was deleted.`);\n      this.setDisplayConfirmationModal(false);\n    };\n\n    this.listDinos = () => {\n      if (this.props.dinosaurs.dinosaurs) {\n        return this.props.dinosaurs.dinosaurs.map((dinosaur, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DinosaurCard, {\n            id: dinosaur.id,\n            name: dinosaur.name,\n            size: dinosaur.size,\n            weight: dinosaur.weight,\n            temporalRange: dinosaur.temporal_range,\n            yearDiscovered: dinosaur.year_discovered,\n            pictureUrl: dinosaur.picture_url,\n            summary: dinosaur.summary,\n            dinotypeId: dinosaur.dino_type_id,\n            handleDelete: this.handleDelete,\n            showDeleteModal: this.showDeleteModal,\n            dinosaur: dinosaur\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)\n        }, dinosaur.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 18\n        }, this));\n      }\n    };\n\n    this.state = {\n      url: this.routeParam = props.match.params.name,\n      showHide: false,\n      dinosaurs: [],\n      displayConfirmationModal: false,\n      setDisplayConfirmationModal: false,\n      deleteMessage: null,\n      setDeleteMessage: null\n    };\n    this.hideComponent = this.hideComponent.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchDinosaurs(this.state.url); ///accessing the function through props (instead of on its own) allows us to connect function with Redux Store; arg telling it which dinosaurs to fetch based on params\n  }\n\n  hideComponent(name) {\n    if (name === 'showHide') {\n      this.setState({\n        showHide: !this.state.showHide\n      });\n    }\n  }\n\n  render() {\n    const {\n      showHide\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            id: \"add\",\n            variant: \"success\",\n            onClick: () => this.hideComponent(\"showHide\"),\n            children: showHide === false ? \"Add Dinosaur to Collection\" : \"Hide Form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", showHide && /*#__PURE__*/_jsxDEV(DinosaurInput, {\n            url: this.state.url,\n            dinoType: dinoTypeSelector(this.state.url)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 110\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DinosaursList, {\n          listDinos: this.listDinos()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    dinosaurs: state.dinosaurs,\n    url: state.url\n  };\n}\n\nexport default connect(mapStateToProps, {\n  fetchDinosaurs,\n  addDinosaur,\n  editDinosaur,\n  deleteDinosaur\n})(DinosaursContainer); //here, fetchDinosaurs is sitting in for mapDispatchToProps and doing this makes IT a prop.","map":{"version":3,"sources":["/mnt/c/Users/chris/code/dinofinder/dinofinder-frontend/src/containers/DinosaursContainer.js"],"names":["React","DinosaurCard","DinosaurInput","DinosaursList","connect","fetchDinosaurs","addDinosaur","editDinosaur","deleteDinosaur","dinoTypeSelector","Container","Button","FontAwesomeIcon","faTrash","DeleteConfirmation","DinosaursContainer","Component","constructor","props","showDeleteModal","dinosaur","setState","setDeleteMessage","setStatesetDisplayConfirmationModal","hideConfirmationModal","setDisplayConfirmationModal","handleDelete","id","dino_type","era_id","alert","listDinos","dinosaurs","map","index","name","size","weight","temporal_range","year_discovered","picture_url","summary","dino_type_id","state","url","routeParam","match","params","showHide","displayConfirmationModal","deleteMessage","hideComponent","bind","componentDidMount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport DinosaurCard from '../components/DinosaurCard'\r\nimport DinosaurInput from '../components/DinosaurInput'\r\nimport DinosaursList from '../components/DinosaursList'\r\nimport {connect} from 'react-redux'\r\nimport {fetchDinosaurs} from '../actions/fetchDinosaurs'\r\nimport { addDinosaur } from '../actions/addDinosaur'\r\nimport { editDinosaur } from '../actions/editDinosaur'\r\nimport { deleteDinosaur } from '../actions/deleteDinosaur'\r\nimport { dinoTypeSelector } from '../helpers/DinoSelector.js'\r\n\r\nimport {Container, Button } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DeleteConfirmation from \"../components/DeleteConfirm\";\r\n\r\n\r\nclass DinosaursContainer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n          url: this.routeParam = props.match.params.name,\r\n          showHide: false,\r\n          dinosaurs: [],\r\n          displayConfirmationModal: false, \r\n          setDisplayConfirmationModal: false,\r\n          deleteMessage: null, \r\n          setDeleteMessage: null \r\n      };\r\n      this.hideComponent = this.hideComponent.bind(this);\r\n    }\r\n\r\n  componentDidMount(){\r\n    this.props.fetchDinosaurs(this.state.url)   ///accessing the function through props (instead of on its own) allows us to connect function with Redux Store; arg telling it which dinosaurs to fetch based on params\r\n  }\r\n\r\n  showDeleteModal = (dinosaur) => {\r\n    // setType(type);\r\n    // setId(id);\r\n    // setFruitMessage(null);\r\n    // setVegetableMessage(null);\r\n    // this.setState({ showHide: !this.state.showHide });\r\n      this.setState({ setDeleteMessage: 'Are you sure?' })\r\n      \r\n      \r\n      this.setStatesetDisplayConfirmationModal(true);\r\n  };\r\n \r\n  \r\n  \r\n  // Hide the modal\r\n  \r\n  hideConfirmationModal = () => {\r\n    this.setDisplayConfirmationModal(false);\r\n  };\r\n\r\n\r\n\r\n\r\nhandleDelete = (dinosaur) => {\r\n    this.props.deleteDinosaur(dinosaur.id, dinosaur.dino_type.id, dinosaur.dino_type.era_id)  //my original code \r\n    alert(`Dinosaur was deleted.`)\r\n    this.setDisplayConfirmationModal(false);\r\n  }\r\n\r\nhideComponent(name) {\r\n  if (name === 'showHide') {\r\n    this.setState({ showHide: !this.state.showHide });\r\n  }\r\n}\r\n\r\nlistDinos = () => {\r\n\r\n  if (this.props.dinosaurs.dinosaurs) {\r\n    return (\r\n      this.props.dinosaurs.dinosaurs.map((dinosaur, index) =>\r\n                 <div key={dinosaur.id}>\r\n                    <DinosaurCard\r\n                      id={dinosaur.id}\r\n                      name={dinosaur.name}\r\n                      size={dinosaur.size}\r\n                      weight={dinosaur.weight}\r\n                      temporalRange={dinosaur.temporal_range}\r\n                      yearDiscovered={dinosaur.year_discovered}\r\n                      pictureUrl={dinosaur.picture_url}\r\n                      summary={dinosaur.summary}\r\n                      dinotypeId={dinosaur.dino_type_id}\r\n                      handleDelete={this.handleDelete}\r\n                      showDeleteModal = {this.showDeleteModal}\r\n                      dinosaur = {dinosaur}\r\n                      />\r\n                </div>)\r\n              )\r\n            }\r\n          }\r\n\r\n  render(){\r\n    const { showHide } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n\r\n\r\n      <Container>\r\n        <div className=\"text-center\">\r\n          <Button id=\"add\" variant=\"success\" onClick={() => this.hideComponent(\"showHide\")}>{showHide === false ? \"Add Dinosaur to Collection\" : \"Hide Form\"}</Button>\r\n        </div>\r\n        <div> {showHide && <DinosaurInput url={this.state.url} dinoType={dinoTypeSelector(this.state.url)}/>}<hr /></div>\r\n\r\n        <DinosaursList listDinos= {this.listDinos()}/>\r\n\r\n\r\n      </Container>\r\n</React.Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    dinosaurs: state.dinosaurs,\r\n    url: state.url\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {fetchDinosaurs, addDinosaur, editDinosaur, deleteDinosaur})(DinosaursContainer)   //here, fetchDinosaurs is sitting in for mapDispatchToProps and doing this makes IT a prop.\r\n"]},"metadata":{},"sourceType":"module"}