{"ast":null,"code":"var _jsxFileName = \"/Users/christopher.dentopscompass.com/Documents/dinofinder-frontend/src/containers/DinoTypesContainer.js\";\nimport React from 'react';\nimport DinoTypeCard from '../components/DinoTypeCard';\nimport { connect } from 'react-redux';\nimport DinoTypesList from '../components/DinoTypesList';\nimport { fetchDinoTypes } from '../actions/fetchDinoTypes';\nimport { Container } from 'react-bootstrap';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DinoTypesContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.listDinoTypes = () => {\n      if (this.props.dinotypes.dinotypes) {\n        return this.props.dinotypes.dinotypes.map((dinotype, index) => /*#__PURE__*/_jsxDEV(DinoTypeCard, {\n          id: dinotype.id,\n          name: dinotype.name,\n          pictureUrl: dinotype.picture_url\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this));\n      }\n    };\n\n    this.state = {\n      url: this.routeParam = props.match.params.name,\n      dinotypes: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchDinoTypes(this.state.url); //argument helps interpolate the proper URL in the action\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }, this), \"What types of creatures are you looking for?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 57\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 63\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(DinoTypesList, {\n          listDinoTypes: this.listDinoTypes()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 1\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 1\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    dinotypes: state.dinotypes,\n    url: state.url\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchDinoTypes\n})(DinoTypesContainer);","map":{"version":3,"names":["React","DinoTypeCard","connect","DinoTypesList","fetchDinoTypes","Container","LoadingIndicator","DinoTypesContainer","Component","constructor","props","listDinoTypes","dinotypes","map","dinotype","index","id","name","picture_url","state","url","routeParam","match","params","componentDidMount","render","mapStateToProps"],"sources":["/Users/christopher.dentopscompass.com/Documents/dinofinder-frontend/src/containers/DinoTypesContainer.js"],"sourcesContent":["\r\nimport React from 'react'\r\nimport DinoTypeCard from '../components/DinoTypeCard'\r\nimport {connect} from 'react-redux'\r\nimport DinoTypesList from '../components/DinoTypesList'\r\nimport {fetchDinoTypes} from '../actions/fetchDinoTypes'\r\nimport { Container } from 'react-bootstrap';\r\nimport LoadingIndicator from '../components/LoadingIndicator'\r\n\r\nclass DinoTypesContainer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n          url: this.routeParam = props.match.params.name,\r\n          dinotypes: ''\r\n      };\r\n  };\r\n\r\ncomponentDidMount(){\r\n    this.props.fetchDinoTypes(this.state.url)  //argument helps interpolate the proper URL in the action\r\n};\r\n\r\n\r\nlistDinoTypes = () => {\r\n  if (this.props.dinotypes.dinotypes) {\r\n    return (\r\n      this.props.dinotypes.dinotypes.map((dinotype, index) =>\r\n        <DinoTypeCard\r\n          key={index} \r\n          id={dinotype.id}\r\n          name={dinotype.name}\r\n          pictureUrl={dinotype.picture_url} />\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n  \r\n<React.Fragment> \r\n      <Container>\r\n      <LoadingIndicator />\r\n        <h2 className = 'text-center'>\r\n          <br />\r\n            What types of creatures are you looking for?<br /><br />\r\n            </h2>  \r\n        <DinoTypesList listDinoTypes={this.listDinoTypes()}/>\r\n       \r\n        </Container>\r\n\r\n<br /> <br /><br />\r\n</React.Fragment>\r\n \r\n    )\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dinotypes: state.dinotypes,\r\n    url: state.url\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {fetchDinoTypes} )(DinoTypesContainer)\r\n\r\n\r\n\r\n"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,cAAR,QAA6B,2BAA7B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;;;AAEA,MAAMC,kBAAN,SAAiCP,KAAK,CAACQ,SAAvC,CAAiD;EAE/CC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAarBC,aAbqB,GAaL,MAAM;MACpB,IAAI,KAAKD,KAAL,CAAWE,SAAX,CAAqBA,SAAzB,EAAoC;QAClC,OACE,KAAKF,KAAL,CAAWE,SAAX,CAAqBA,SAArB,CAA+BC,GAA/B,CAAmC,CAACC,QAAD,EAAWC,KAAX,kBACjC,QAAC,YAAD;UAEE,EAAE,EAAED,QAAQ,CAACE,EAFf;UAGE,IAAI,EAAEF,QAAQ,CAACG,IAHjB;UAIE,UAAU,EAAEH,QAAQ,CAACI;QAJvB,GACOH,KADP;UAAA;UAAA;UAAA;QAAA,QADF,CADF;MASC;IACF,CAzBkB;;IAEjB,KAAKI,KAAL,GAAa;MACPC,GAAG,EAAE,KAAKC,UAAL,GAAkBX,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAAmBN,IADnC;MAEPL,SAAS,EAAE;IAFJ,CAAb;EAID;;EAEHY,iBAAiB,GAAE;IACf,KAAKd,KAAL,CAAWN,cAAX,CAA0B,KAAKe,KAAL,CAAWC,GAArC,EADe,CAC4B;EAC9C;;EAmBCK,MAAM,GAAE;IACN,oBAEJ,QAAC,KAAD,CAAO,QAAP;MAAA,wBACM,QAAC,SAAD;QAAA,wBACA,QAAC,gBAAD;UAAA;UAAA;UAAA;QAAA,QADA,eAEE;UAAI,SAAS,EAAG,aAAhB;UAAA,wBACE;YAAA;YAAA;YAAA;UAAA,QADF,+DAEgD;YAAA;YAAA;YAAA;UAAA,QAFhD,eAEsD;YAAA;YAAA;YAAA;UAAA,QAFtD;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAME,QAAC,aAAD;UAAe,aAAa,EAAE,KAAKd,aAAL;QAA9B;UAAA;UAAA;UAAA;QAAA,QANF;MAAA;QAAA;QAAA;QAAA;MAAA,QADN,eAWA;QAAA;QAAA;QAAA;MAAA,QAXA,oBAWO;QAAA;QAAA;QAAA;MAAA,QAXP,eAWa;QAAA;QAAA;QAAA;MAAA,QAXb;IAAA;MAAA;MAAA;MAAA;IAAA,QAFI;EAiBD;;AAjD8C;;AAkDhD;;AAED,MAAMe,eAAe,GAAIP,KAAD,IAAW;EACjC,OAAO;IACLP,SAAS,EAAEO,KAAK,CAACP,SADZ;IAELQ,GAAG,EAAED,KAAK,CAACC;EAFN,CAAP;AAID,CALD;;AAOA,eAAelB,OAAO,CAACwB,eAAD,EAAkB;EAACtB;AAAD,CAAlB,CAAP,CAA4CG,kBAA5C,CAAf"},"metadata":{},"sourceType":"module"}