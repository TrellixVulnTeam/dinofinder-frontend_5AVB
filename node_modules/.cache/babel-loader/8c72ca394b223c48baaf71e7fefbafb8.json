{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/chris/code/dinofinder/dinofinder-frontend/src/containers/DinoTypesContainer.js\";\nimport React from 'react';\nimport DinoTypeCard from '../components/DinoTypeCard';\nimport { connect } from 'react-redux';\nimport DinoTypesList from '../components/DinoTypesList';\nimport { fetchDinoTypes } from '../actions/fetchDinoTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass DinoTypesContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.listDinoTypes = () => {\n      if (this.props.dinotypes.dinotypes) {\n        return this.props.dinotypes.dinotypes.map((dinotype, index) => /*#__PURE__*/_jsxDEV(DinoTypeCard, {\n          id: dinotype.id,\n          name: dinotype.name,\n          pictureUrl: dinotype.picture_url\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this));\n      }\n    };\n\n    this.state = {\n      url: this.routeParam = props.match.params.name,\n      dinotypes: ''\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchDinoTypes(this.state.url); //argument helps interpolate the proper URL in the action\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), \"What types of creatures are you looking for?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 57\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(DinoTypesList, {\n          listDinoTypes: this.listDinoTypes()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    dinotypes: state.dinotypes,\n    url: state.url\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchDinoTypes\n})(DinoTypesContainer);","map":{"version":3,"sources":["/mnt/c/Users/chris/code/dinofinder/dinofinder-frontend/src/containers/DinoTypesContainer.js"],"names":["React","DinoTypeCard","connect","DinoTypesList","fetchDinoTypes","DinoTypesContainer","Component","constructor","props","listDinoTypes","dinotypes","map","dinotype","index","id","name","picture_url","state","url","routeParam","match","params","componentDidMount","render","mapStateToProps"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAAQC,cAAR,QAA6B,2BAA7B;;;AAGA,MAAMC,kBAAN,SAAiCL,KAAK,CAACM,SAAvC,CAAiD;AAE/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAarBC,aAbqB,GAaL,MAAM;AACpB,UAAI,KAAKD,KAAL,CAAWE,SAAX,CAAqBA,SAAzB,EAAoC;AAClC,eACE,KAAKF,KAAL,CAAWE,SAAX,CAAqBA,SAArB,CAA+BC,GAA/B,CAAmC,CAACC,QAAD,EAAWC,KAAX,kBACjC,QAAC,YAAD;AAEE,UAAA,EAAE,EAAED,QAAQ,CAACE,EAFf;AAGE,UAAA,IAAI,EAAEF,QAAQ,CAACG,IAHjB;AAIE,UAAA,UAAU,EAAEH,QAAQ,CAACI;AAJvB,WACOH,KADP;AAAA;AAAA;AAAA;AAAA,gBADF,CADF;AASC;AACF,KAzBkB;;AAEjB,SAAKI,KAAL,GAAa;AACPC,MAAAA,GAAG,EAAE,KAAKC,UAAL,GAAkBX,KAAK,CAACY,KAAN,CAAYC,MAAZ,CAAmBN,IADnC;AAEPL,MAAAA,SAAS,EAAE;AAFJ,KAAb;AAID;;AAEHY,EAAAA,iBAAiB,GAAE;AACf,SAAKd,KAAL,CAAWJ,cAAX,CAA0B,KAAKa,KAAL,CAAWC,GAArC,EADe,CAC4B;AAC9C;;AAmBCK,EAAAA,MAAM,GAAE;AACN,wBAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAG,aAAhB;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA,gBADF,+DAEgD;AAAA;AAAA;AAAA;AAAA,gBAFhD;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA,+BAAK,QAAC,aAAD;AAAe,UAAA,aAAa,EAAE,KAAKd,aAAL;AAA9B;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAaD;;AA7C8C;;AA8ChD;;AAED,MAAMe,eAAe,GAAIP,KAAD,IAAW;AACjC,SAAO;AACLP,IAAAA,SAAS,EAAEO,KAAK,CAACP,SADZ;AAELQ,IAAAA,GAAG,EAAED,KAAK,CAACC;AAFN,GAAP;AAID,CALD;;AAOA,eAAehB,OAAO,CAACsB,eAAD,EAAkB;AAACpB,EAAAA;AAAD,CAAlB,CAAP,CAA4CC,kBAA5C,CAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport DinoTypeCard from '../components/DinoTypeCard'\r\nimport {connect} from 'react-redux'\r\nimport DinoTypesList from '../components/DinoTypesList'\r\nimport {fetchDinoTypes} from '../actions/fetchDinoTypes'\r\n\r\n\r\nclass DinoTypesContainer extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n          url: this.routeParam = props.match.params.name,\r\n          dinotypes: ''\r\n      };\r\n  };\r\n\r\ncomponentDidMount(){\r\n    this.props.fetchDinoTypes(this.state.url)  //argument helps interpolate the proper URL in the action\r\n};\r\n\r\n\r\nlistDinoTypes = () => {\r\n  if (this.props.dinotypes.dinotypes) {\r\n    return (\r\n      this.props.dinotypes.dinotypes.map((dinotype, index) =>\r\n        <DinoTypeCard\r\n          key={index} \r\n          id={dinotype.id}\r\n          name={dinotype.name}\r\n          pictureUrl={dinotype.picture_url} />\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n  \r\n \r\n      <div className=\"container\">\r\n        <h2 className = 'text-center'>\r\n          <br />\r\n            What types of creatures are you looking for?<br />\r\n            </h2>  \r\n        <div><DinoTypesList listDinoTypes={this.listDinoTypes()}/></div>\r\n        <br />\r\n        </div>\r\n \r\n    )\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dinotypes: state.dinotypes,\r\n    url: state.url\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {fetchDinoTypes} )(DinoTypesContainer)\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}